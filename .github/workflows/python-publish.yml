# This workflow will upload a Python Package to PyPI when a release is created

name: Upload Python Package to PYPI

on:
  push:
    branches:
      - release 

permissions:
  contents: read

jobs:
  release-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install Dependencies 
        run: |
          python -m pip install build twine

      - name: Build Release Distribution
        run: |
          cd persist_sql
          python -m build

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: persistentsql/dist/

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - release-build
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    # Dedicated environments with protections for publishing are strongly recommended.
    # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
    environment:
      name: pypi
      # OPTIONAL: uncomment and update to include your PyPI project URL in the deployment status:
      # url: https://pypi.org/p/YOURPROJECT
      #
      # ALTERNATIVE: if your GitHub Release name is the PyPI project version string
      # ALTERNATIVE: exactly, uncomment the following line instead:
      # url: https://pypi.org/project/YOURPROJECT/${{ github.event.release.name }}

    steps:
      - name: Download Release Distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: persistentsql/dist/

      - name: Publish to PyPI with Twine
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPYI_API_TOKEN }}  # âœ… Using GitHub Secrets
        run: |
          python -m pip install --upgrade twine
          twine upload persistentsql/dist/*
