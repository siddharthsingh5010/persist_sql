Metadata-Version: 2.4
Name: persistent_sql
Version: 0.1.2
Summary: Persistent SQLite Database using S3 on Cloud Workspaces
Author-email: Siddharth Singh <siddharthsingh5010@icloud.com>
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: boto3
Requires-Dist: pandas
Requires-Dist: numpy

# Persistant SQLite Database on Cloud Workspaces 

As a data science enthusiast, I have been using Lightning AI for my analytics and upskilling. Itâ€™s a great and cost-effective platform, but Iâ€™ve often faced one major limitationâ€”the absence of SQL Server or any other persistent database.

This isnâ€™t just a Lightning AI issue; itâ€™s a common challenge with Google Colab, Codespaces, and other cloud workspaces. One common workaround is using SQLite, but thereâ€™s a catchâ€”since cloud workspaces are ephemeral, all data is lost after every session, forcing me to recreate tables from scratch each time.

In Lightning AI, I could reuse the same database file within the same studio, but what if I wanted to access it across different studios? While there is a way around this, itâ€™s neither easy nor straightforward.

Exploring Alternatives

I considered using AWS RDS or Azure Databases, but they are expensive and not ideal for someone using them for personal projects or learning.

The Solution: Persistent SQL Database for Cloud Workspaces

To address this, I built a solution that allows users to maintain a persistent SQL database in cloud environments using:
âœ… SQLite Database for local queries
âœ… AWS S3 Bucket for persistent storage

How It Works
	â€¢	The solution saves your SQLite database file in an S3 bucket, enabling you to restore it across different cloud sessions.
	â€¢	Simply provide your AWS credentials as environment variables, and it will handle database creation and restoration automatically.


How to Use (Example) - 
- connect_db('dev')
- %sql select * from tablename

Limitations & Considerations

ðŸ”¹ This works best when your database size is small.
ðŸ”¹ If your data grows significantly, consider splitting tables across multiple database files to optimize performance.

GitHub Repository & Demo Notebook

I have shared the GitHub repo below, which includes a sample notebook demonstrating how to use this solution. Feel free to explore, contribute, and share your feedback! ðŸš€

Would love to hear your thoughts! How do you manage databases in cloud workspaces? Letâ€™s discuss in the comments. ðŸ‘‡
